#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Cambria"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing other 1.2
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 25col%
\topmargin 20col%
\rightmargin 25col%
\bottommargin 20col%
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Design Document
\end_layout

\begin_layout Standard
\align left
\begin_inset VSpace vfill
\end_inset


\series bold
\size large
Document Version 1.0
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series default
Matteo Frosi (mat.
 875393)
\begin_inset Newline newline
\end_inset

Luca Costa (mat.
 808109)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
This document, addressed mainly to developers, aims to go into further details
 regarding the specification of the project, described in the RASD.
 Here more technical features will be described, including:
\end_layout

\begin_layout Itemize
The high level architecture
\end_layout

\begin_layout Itemize
Some possible design patterns 
\end_layout

\begin_layout Itemize
The description of the main components and their interaction (Runtime View)
\end_layout

\begin_layout Itemize
A brief description of the algorithms on which the software relies
\end_layout

\begin_layout Itemize
A more detailed overview of the user interfaces
\end_layout

\begin_layout Standard
Although these are the main topics of the document, other minor details
 will be touched and discussed, such as the architectural style and a brief
 comparison with other styles and the mapping between the requirements defined
 in the RASD and the designed elements described in this document.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
PowerEnJoy is an electrical car sharing service, based on a mobile application.
 The targets of the service, intended as users, are people that needs to
 move from a place to another within a city and requires a conveyance to
 move (because they don't have their own or simply can't use it).
\begin_inset Newline newline
\end_inset

A user can make a reservation for a car, using the mobile app and his/her
 account, and check for the availability and status of all the cars within
 his/her position, identified using GPS localization, or a specific one,
 inserted manually by the user.
 As stated before, to access the service, the user must possess a private
 account, so a registration is needed.
 
\begin_inset Newline newline
\end_inset

The system provides the users a safe way (identification code) to access
 the cars, and the riding service and keeps trace of the status of all the
 cars.
\begin_inset Newline newline
\end_inset

Moreover, the system prizes or punishes a respectively good or bad behavior
 from the users, applying a discount or an overcharge on the cost of a ride.
 As example, if the user leaves the car without much battery, he/she will
 have to pay more than the standard cost of the ride, because the car will
 need to be charged and this operation has a cost.
 On the other hand, if a user plugs the car before ending the service, it
 receives a discount.
\begin_inset Newline newline
\end_inset

The system includes other functionality, such as GPS based maps available
 in every car, an emergency procedure in case an accident occur during a
 ride and the notification of a car status if the user requested it.
\end_layout

\begin_layout Subsection
Definitions, acronyms, abbreviations
\end_layout

\begin_layout Itemize
RASD: document about the requirements analysis of the project.
\end_layout

\begin_layout Itemize
DD: document about the design choices and the components description of
 the project.
\end_layout

\begin_layout Itemize
GPS: global navigation satellite system that provides location and time
 information in all weather conditions, anywhere on or near the Earth where
 there is an unobstructed line of sight to four or more GPS satellites.
 
\end_layout

\begin_layout Itemize
SMS: short message service; it is a notification sent to a mobile phone,
 we need a GSM gateway to use it.
\end_layout

\begin_layout Itemize
GMS gateway: device that allows SMS text messages to be sent and/or received
 by email, from Web pages or from other software applications by acquiring
 a unique identifier from the mobile phone's Subscriber Identity Module,
 or SIM card.
\end_layout

\begin_layout Itemize
Push notification/ push message: it is a notification sent to a smartphone
 using the mobile application.
\end_layout

\begin_layout Itemize
API: application programming interface; it is a common way to communicate
 with another system.
\end_layout

\begin_layout Itemize
REST: representational state transfer, it's one way of providing interoperabilit
y between computer systems on the Internet.
\end_layout

\begin_layout Itemize
RESTFul: REST with no session.
\end_layout

\begin_layout Itemize
UX: user experience design
\end_layout

\begin_layout Itemize
URL: uniform resource locator.
\end_layout

\begin_layout Itemize
MVC: model view controller, it's a design pattern.
\end_layout

\begin_layout Itemize
SOA: service oriented architecture, it's a style of software design where
 services are provided to the other components by application components,
 through a communication protocol over a network.
\end_layout

\begin_layout Itemize
Layer: way of organizing code in sections sharing a common goal.
 The highest partition includes Presentation Layer, Business or Logic Layer
 and Data Layer.
\end_layout

\begin_layout Itemize
Tier: physical deployment of layers.
\end_layout

\begin_layout Itemize
Safe area: it is a specific area where the electric cars of PowerEnJoy service
 can park.
 The set of safe areas is pre-defined and owned by the company/society that
 requested the management system for the service.
\end_layout

\begin_layout Itemize
Special safe area: it is a safe area where power grid stations are installed.
\end_layout

\begin_layout Itemize
Power grid station: it is an installation that allows the recharge of an
 electric car.
\end_layout

\begin_layout Itemize
Communication primitives: set of instructions and procedure that allow a
 communication between machines and devices over a network.
\end_layout

\begin_layout Itemize
Sensor data retrieval: procedure that consists in getting all the information
 collected by the sensors of the car.
\end_layout

\begin_layout Subsection
Document structure
\end_layout

\begin_layout Itemize
Introduction: this section introduces the design document.
 It gives an overview on what topics will be covered and what aspects described
 in the RASD will be improved here.
\end_layout

\begin_layout Itemize
Architecture Design: this section is divided into different parts, each
 describing an aspect of the software design.
\end_layout

\begin_deeper
\begin_layout Itemize
Overview: brief description of the division in tiers and layers of the applicati
on.
\end_layout

\begin_layout Itemize
High level components and interaction: high level view of the components
 of the application and the way they communicate.
\end_layout

\end_deeper
\begin_layout Itemize
Algorithm Design: this section describes some of the algorithms that the
 application will rely on.
 To focus on the algorithm idea and not the fine grained implementation,
 pseudo-code will be used.
\end_layout

\begin_layout Itemize
User Interface Design: this section presents mockups and user experience
 explained via UX diagrams.
\end_layout

\begin_layout Itemize
Requirements Traceability: this section aims to explain how the decisions
 taken in the RASD are linked to design elements.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Architecture design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
PowerEnJoy relies on a three tier architecture.
 Referring to the proposed system architecture presented in section 2.3 of
 the RASD, the following figure represents the tier division of the system.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TierDivision.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Proposed architecture, tier division - red: client, blue: server, azure:
 database
\end_layout

\end_inset


\end_layout

\end_inset

The client side includes all the possible ways by which a user can interact
 with the server (and the service), that are the mobile application and
 the car itself.
 The first represents the classical idea of client tier, including a GUI
 and a minimal amount of processing power that allows the user to have a
 connection with the rest of the tier, shown in a graphical way, that is
 more user friendly.
 The latter is, instead, a particular client tier that acts as a mini server,
 because it contains more logic than the mobile application.
 Here there is not a real graphic interface but multiple mechanical interfaces
 (MUI) can be detected, such as the numeric keypad that make the user able
 to unlock the car or end the service, the emergency button and the car
 screen, that is thought more towards an informative interface than an interacti
ve interface.
 To better understand this concept, follow the same figure, this time divided
 in high level layers.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename LayerDivision.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Proposed architecture, layer division - red: presentation, blue: logic/business,
 purple: data
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mobile application is also part of the logic layer because it can hold
 some immediate processes, instead of delegating them to the main server.
 An immediate example could be the elaboration of the GPS based map during
 the research of an available car.
\end_layout

\begin_layout Subsection
Overview of the car system
\end_layout

\begin_layout Standard
It should be useful to spend some words to discuss more in detail the structure
 of the car and the way the user can interact with it, and consequentially
 with the server.
 Using multiple sensors, information about the car status can be retrieved,
 such as battery charge, number of passengers, degradation level of the
 car components, or even the localization data, obtained with GPS.
 Such data pool is interfaced with the car system, that resembles the shape
 of an application.
 The car app can be considered as a cluster of procedures and interfaces
 that allows user, car hardware and system to communicate and 
\begin_inset Quotes eld
\end_inset

know
\begin_inset Quotes erd
\end_inset

 about each other.
 Speaking in pattern terms, the car app emulates the controller entity in
 the MVC pattern, even if only partially.
 As said in the previous subsection, while the emergency button and the
 numeric keypad make the user interact with the car in an active way, the
 car screen acts as a passive element and is simply needed to inform the
 user of the car status and the service info.
 We can consider such feature as a way to diminish the interaction user-system
 to a very strict level, without changing the user perspective of the service.
 Such reduction lightens the logic needed in the car, making the project
 more achievable from a budget and complexity point of view.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename CarSystemDetailed.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
High level car system
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Components of the system
\end_layout

\begin_layout Subsubsection
High level view
\end_layout

\begin_layout Standard
From an high point of view, the system can be divided into four elements.
 The users can interact with the server, that is the main central where
 all the logic is concentrated, directly or with the support of the car.
 A user can initiate the interaction with the server using his/her mobile
 application.
 To proceed in using the service, the user must first be logged into the
 system and for every action he/she does (monitoring request, reservation
 request, take back of a reservation, code request and so on), he/she has
 to wait for the server response, informing the user that the request has
 been succesful or not.
 Because of this sequentiality of actions, the communication directed from
 user to server has to follow synchronous rules when proceeding in a certain
 sequence and leave all the other non-interactive options as to be implemented
 in an asynchronous way.
 As example the user shouldn't be prohibited to search for an available
 car even if he/she already made a reservation, but he/she cannot made a
 code request if there is no reservation made.
 A clever way to implement the user-server relationship is to made all the
 communications asynchronous but thanks to particular patterns, MVC among
 them, denying the usage of particular services if certain conditions are
 not met.
 
\begin_inset Newline newline
\end_inset

The user can also interact indirectly with the server using the car - or
 it can be said that the car interacts with the server -.
 Some physical interfaces, such as the emergency button or the numeric keypad,
 allow the user to modify the condition of a car and, consequentially, of
 his/her service.
 
\begin_inset Newline newline
\end_inset

The server/central acts mainly as an elaborator, or referring to the chosen
 architecture, as a monolithic logic processor.
 Its job is to coordinate the requests from the users and the change of
 status of all the cars.
 As said before, the interaction between user and server can be described
 with a simple MVC pattern.
 From a very high view, the user makes an action, communicates it to the
 server, the server elaborates the request and confirms/rejects the will
 of the user.
 The server-car-user relationship is a bit more complex.
 Firstly, there is a continous interaction between every car and the server,
 that follows this sequence: 
\end_layout

\begin_layout Enumerate
Data retrieval 
\end_layout

\begin_layout Enumerate
Car status update (car to server) 
\end_layout

\begin_layout Enumerate
Database update (server to database) 
\end_layout

\begin_layout Enumerate
[Optional] Car update (server to car), as example the lock following the
 end of the service
\end_layout

\begin_layout Standard
Moreover, to this sequence must be added the interaction with the user,
 that is both passive and active as said in the previous section.
 
\begin_inset Newline newline
\end_inset

The server communicates with all the other components using asynchronous
 messagges, because it does not depend on their status but acts as the independe
nt core of the software.
 Just referring to the user behavior, it would be unthinkable to have the
 server wait for a user decision, stated that the thinktime can be to long,
 and each communication would become a bottleneck for the whole system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename HighViewComponents.png
	lyxscale 50
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
High level view of the components of the system
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Architectural styles
\end_layout

\begin_layout Standard

\series bold
3-Tier Architecture
\series default
 : Basically a 3-Tier Architecture is a more complex 1-2 tier architecture.
\end_layout

\begin_layout Itemize
Specialized (there is 1 more tier dedicated to a certain task).
\end_layout

\begin_layout Itemize
Flexible (if something goes wrong with a tier, the other 2 can work as well).
\end_layout

\begin_layout Itemize
Secure (the client will not have direct access to the database).
\end_layout

\begin_layout Itemize
Performing (tasks are shared between servers).
\end_layout

\begin_layout Itemize
Deployed as a Monolith.
\end_layout

\begin_layout Itemize
Simple to test and deploy.
\end_layout

\begin_layout Standard

\series bold
Hexagonal 
\series default
: The core is a business logic implemented by modules with attached several
 services by specific adapters.
\end_layout

\begin_layout Itemize
Deployes as a Monolith.
\end_layout

\begin_layout Itemize
Simple to test and deploy.
\end_layout

\begin_layout Standard
A Hexagonal architecture is more suitable for bigger system than our.
 Moreover there are more interfaces to be implemented.
 
\begin_inset Newline newline
\end_inset

For these reasons we choose the 3-Tier Architecture.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Microservises
\series default
 : set of smaller, interconnected servises.
 Each one has its own hexagonal architecture.
\end_layout

\begin_layout Itemize
Easy to deploy indipendently.
\end_layout

\begin_layout Itemize
Each service has its own database.
\end_layout

\begin_layout Standard
Microservise pattern is more simple and efficient than a monolith.
 In fact, every microservice is a mini-monolith.
 The worse part is that different microservises have different databases
 and sometimes there is incoherence between them.
 
\begin_inset Newline newline
\end_inset

For these reasons we choose the 3-Tier architecture.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
SOA
\series default
 : architecture is split up into various servises.
\end_layout

\begin_layout Itemize
Scalable.
\end_layout

\begin_layout Itemize
Reusable.
\end_layout

\begin_layout Itemize
Easy testing and debugging.
\end_layout

\begin_layout Itemize
Flexible.
\end_layout

\begin_layout Standard
SOA architecture is not suitable for GUI functionalities because it requires
 a heavy data exchange.
\begin_inset Newline newline
\end_inset

For these reason we choose 3-Tier architecture.
\end_layout

\begin_layout Section
Document further information
\end_layout

\begin_layout Subsection
References
\end_layout

\begin_layout Itemize
RASD, before Version 4.5
\end_layout

\begin_layout Itemize
Assignments AA 2016-2017.pdf
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://msdn.microsoft.com/en-us/library/ee658116.aspx
\end_layout

\end_inset

, containing some information about layers design
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://alistair.cockburn.us/Hexagonal+architecture
\end_layout

\end_inset

, contains some information about the Hexagonal architecture
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.nginx.com/blog/introduction-to-microservices/
\end_layout

\end_inset

, contains some information about the Microservices architecture
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://8thlight.com/blog/uncle-bob/2011/09/30/Screaming-Architecture.html
\end_layout

\end_inset

, contains some advices over the architecture choice and implementation
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.uxbooth.com/articles/8-must-see-ux-diagrams/
\end_layout

\end_inset

, contains some examples of user experience diagrams
\end_layout

\begin_layout Itemize
Sample Design Deliverable Discussed on Nov.
 2.pdf
\end_layout

\begin_layout Itemize
Paper on the green move project.pdf
\end_layout

\begin_layout Itemize
Second paper on the green move project.pdf
\end_layout

\begin_layout Subsection
ChangeLog
\end_layout

\begin_layout Itemize
[21/11/2016] [
\series bold
Version 0.1
\series default
] :: Added first part of the document introduction, including preface, Purpose,
 Scope and Definitions.
 ChangeLog and Hours of work sections also introduced.
\end_layout

\begin_layout Itemize
[21/11/2016] [
\series bold
Version 0.2
\series default
] :: Added the References and Document structure sections.
 
\end_layout

\begin_layout Itemize
[23/11/2016] [
\series bold
Version 0.3
\series default
] :: Added the overview of the architecture of the project and a brief descripti
on of the car system, so subsections 2.1 and 2.2.
\end_layout

\begin_layout Itemize
[23/11/2016] [
\series bold
Version 0.4
\series default
] :: Added the description of the different architectural styles that were
 considered and their brief comparison.
\end_layout

\begin_layout Itemize
[24/11/2016] [
\series bold
Version 1.0
\series default
] :: Added high view of the components of the system with a detailed description
, subsubsection 2.3.1.
\end_layout

\begin_layout Subsection
Hours of work
\end_layout

\begin_layout Subsubsection*
Matteo Frosi
\end_layout

\begin_layout Standard
[Before 21/11/2016]: 3.00 hours (spent in analyzing well known architectures,
 to study and apply them at our problem).
\begin_inset Newline newline
\end_inset

[21/11/2016]: 2.00 hours (further analysis of an applicable architecture
 to our problem, alleging to the classic 3 Tier architectures).
\begin_inset Newline newline
\end_inset

[21/11/2016]: 1.00 hours (writing of the first part of the document).
\begin_inset Newline newline
\end_inset

[23/11/2016]: 2.00 hours (writing of the overview section of the document
 and drawing of architectures images)
\begin_inset Newline newline
\end_inset

[24/11/2016]: 2.00 hours (drawing up of the component view and writing of
 the component high view section)
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Luca Costa
\begin_inset Newline newline
\end_inset

[Before 21/11/2016]: 2.30 hours (spent learning about the various architectures
 and apply them to our problem)
\begin_inset Newline newline
\end_inset

[22/11/16]: 1.00 hours (spent learning about a possible implementation of
 the different architecture styles)
\begin_inset Newline newline
\end_inset

[23/11/16]: 3.00 hours (spent writing comparison between architectures and
 informing about DD document in general)
\end_layout

\end_body
\end_document
