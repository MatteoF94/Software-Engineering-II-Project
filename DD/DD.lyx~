#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{changepage}
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Cambria"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing other 1.2
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 25col%
\topmargin 20col%
\rightmargin 25col%
\bottommargin 20col%
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Design Document
\end_layout

\begin_layout Standard
\align left
\begin_inset VSpace vfill
\end_inset


\series bold
\size large
Document Version 1.5
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series default
Matteo Frosi (mat.
 875393)
\begin_inset Newline newline
\end_inset

Luca Costa (mat.
 808109)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
This document, addressed mainly to developers, aims to go into further details
 regarding the specification of the project, described in the RASD.
 Here more technical features will be described, including:
\end_layout

\begin_layout Itemize
The high level architecture
\end_layout

\begin_layout Itemize
Some possible design patterns 
\end_layout

\begin_layout Itemize
The description of the main components and their interaction (Runtime View)
\end_layout

\begin_layout Itemize
A brief description of the algorithms on which the software relies
\end_layout

\begin_layout Itemize
A more detailed overview of the user interfaces
\end_layout

\begin_layout Standard
Although these are the main topics of the document, other minor details
 will be touched and discussed, such as the architectural style and a brief
 comparison with other styles and the mapping between the requirements defined
 in the RASD and the designed elements described in this document.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
PowerEnJoy is an electrical car sharing service, based on a mobile application.
 The targets of the service, intended as users, are people that needs to
 move from a place to another within a city and requires a conveyance to
 move (because they don't have their own or simply can't use it).
\begin_inset Newline newline
\end_inset

A user can make a reservation for a car, using the mobile app and his/her
 account, and check for the availability and status of all the cars within
 his/her position, identified using GPS localization, or a specific one,
 inserted manually by the user.
 As stated before, to access the service, the user must possess a private
 account, so a registration is needed.
 
\begin_inset Newline newline
\end_inset

The system provides the users a safe way (identification code) to access
 the cars, and the riding service and keeps trace of the status of all the
 cars.
\begin_inset Newline newline
\end_inset

Moreover, the system prizes or punishes a respectively good or bad behavior
 from the users, applying a discount or an overcharge on the cost of a ride.
 As example, if the user leaves the car without much battery, he/she will
 have to pay more than the standard cost of the ride, because the car will
 need to be charged and this operation has a cost.
 On the other hand, if a user plugs the car before ending the service, it
 receives a discount.
\begin_inset Newline newline
\end_inset

The system includes other functionality, such as GPS based maps available
 in every car, an emergency procedure in case an accident occur during a
 ride and the notification of a car status if the user requested it.
\end_layout

\begin_layout Subsection
Definitions, acronyms, abbreviations
\end_layout

\begin_layout Itemize
RASD: document about the requirements analysis of the project.
\end_layout

\begin_layout Itemize
DD: document about the design choices and the components description of
 the project.
\end_layout

\begin_layout Itemize
GPS: global navigation satellite system that provides location and time
 information in all weather conditions, anywhere on or near the Earth where
 there is an unobstructed line of sight to four or more GPS satellites.
 
\end_layout

\begin_layout Itemize
SMS: short message service; it is a notification sent to a mobile phone,
 we need a GSM gateway to use it.
\end_layout

\begin_layout Itemize
GMS gateway: device that allows SMS text messages to be sent and/or received
 by email, from Web pages or from other software applications by acquiring
 a unique identifier from the mobile phone's Subscriber Identity Module,
 or SIM card.
\end_layout

\begin_layout Itemize
Push notification/ push message: it is a notification sent to a smartphone
 using the mobile application.
\end_layout

\begin_layout Itemize
API: application programming interface; it is a common way to communicate
 with another system.
\end_layout

\begin_layout Itemize
REST: representational state transfer, it's one way of providing interoperabilit
y between computer systems on the Internet.
\end_layout

\begin_layout Itemize
RESTFul: REST with no session.
\end_layout

\begin_layout Itemize
UX: user experience design
\end_layout

\begin_layout Itemize
URL: uniform resource locator.
\end_layout

\begin_layout Itemize
MVC: model view controller, it's a design pattern.
\end_layout

\begin_layout Itemize
SOA: service oriented architecture, it's a style of software design where
 services are provided to the other components by application components,
 through a communication protocol over a network.
\end_layout

\begin_layout Itemize
Layer: way of organizing code in sections sharing a common goal.
 The highest partition includes Presentation Layer, Business or Logic Layer
 and Data Layer.
\end_layout

\begin_layout Itemize
Tier: physical deployment of layers.
\end_layout

\begin_layout Itemize
Safe area: it is a specific area where the electric cars of PowerEnJoy service
 can park.
 The set of safe areas is pre-defined and owned by the company/society that
 requested the management system for the service.
\end_layout

\begin_layout Itemize
Special safe area: it is a safe area where power grid stations are installed.
\end_layout

\begin_layout Itemize
Power grid station: it is an installation that allows the recharge of an
 electric car.
\end_layout

\begin_layout Itemize
Communication primitives: set of instructions and procedure that allow a
 communication between machines and devices over a network.
\end_layout

\begin_layout Itemize
Sensor data retrieval: procedure that consists in getting all the information
 collected by the sensors of the car.
\end_layout

\begin_layout Subsection
Document structure
\end_layout

\begin_layout Itemize
Introduction: this section introduces the design document.
 It gives an overview on what topics will be covered and what aspects described
 in the RASD will be improved here.
\end_layout

\begin_layout Itemize
Architecture Design: this section is divided into different parts, each
 describing an aspect of the software design.
\end_layout

\begin_deeper
\begin_layout Itemize
Overview: brief description of the division in tiers and layers of the applicati
on.
\end_layout

\begin_layout Itemize
Components and interaction: high level and detailed view of the components
 of the application and the way they communicate.
\end_layout

\begin_layout Itemize
Deployment: view of the physical devices and the way they contains components
\end_layout

\end_deeper
\begin_layout Itemize
Algorithm Design: this section describes some of the algorithms that the
 application will rely on.
 To focus on the algorithm idea and not the fine grained implementation,
 pseudo-code will be used.
\end_layout

\begin_layout Itemize
User Interface Design: this section presents mockups and user experience
 explained via UX diagrams.
\end_layout

\begin_layout Itemize
Requirements Traceability: this section aims to explain how the decisions
 taken in the RASD are linked to design elements.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Architecture design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
PowerEnJoy relies on a three tier architecture.
 Referring to the proposed system architecture presented in section 2.3 of
 the RASD, the following figure represents the tier division of the system.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ArchitecturePNGs/TierDivision.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Proposed architecture, tier division - red: client, blue: server, azure:
 database
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The client side includes all the possible ways by which a user can interact
 with the server (and the service), that are the mobile application and
 the car itself.
 The first represents the classical idea of client tier, including a GUI
 and a minimal amount of processing power that allows the user to have a
 connection with the rest of the tier, shown in a graphical way, that is
 more user friendly.
 The latter is, instead, a particular client tier that acts as a mini server,
 because it contains more logic than the mobile application.
 Here there is not a real graphic interface but multiple mechanical interfaces
 (MUI) can be detected, such as the numeric keypad that make the user able
 to unlock the car or end the service, the emergency button and the car
 screen, that is thought more towards an informative interface than an interacti
ve interface.
 To better understand this concept, follow the same figure, this time divided
 in high level layers.
 
\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ArchitecturePNGs/LayerDivision.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Proposed architecture, layer division - red: presentation, blue: logic/business,
 purple: data
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The mobile application is also part of the logic layer because it can hold
 some immediate processes, instead of delegating them to the main server.
 An immediate example could be the elaboration of the GPS based map during
 the research of an available car.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Overview of the car system
\end_layout

\begin_layout Standard
It should be useful to spend some words to discuss more in detail the structure
 of the car and the way the user can interact with it, and consequentially
 with the server.
 Using multiple sensors, information about the car status can be retrieved,
 such as battery charge, number of passengers, degradation level of the
 car components, or even the localization data, obtained with GPS.
 Such data pool is interfaced with the car system, that resembles the shape
 of an application.
 The car app can be considered as a cluster of procedures and interfaces
 that allows user, car hardware and system to communicate and 
\begin_inset Quotes eld
\end_inset

know
\begin_inset Quotes erd
\end_inset

 about each other.
 Speaking in pattern terms, the car app emulates the controller entity in
 the MVC pattern, even if only partially.
 As said in the previous subsection, while the emergency button and the
 numeric keypad make the user interact with the car in an active way, the
 car screen acts as a passive element and is simply needed to inform the
 user of the car status and the service info.
 We can consider such feature as a way to diminish the interaction user-system
 to a very strict level, without changing the user perspective of the service.
 Such reduction lightens the logic needed in the car, making the project
 more achievable from a budget and complexity point of view.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ArchitecturePNGs/CarSystemDetailed.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
High level car system
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Components of the system
\end_layout

\begin_layout Subsubsection
High level view
\end_layout

\begin_layout Standard
From an high point of view, the system can be divided into four elements.
 The users can interact with the server, that is the main central where
 all the logic is concentrated, directly or with the support of the car.
 A user can initiate the interaction with the server using his/her mobile
 application.
 To proceed in using the service, the user must first be logged into the
 system and for every action he/she does (monitoring request, reservation
 request, take back of a reservation, code request and so on), he/she has
 to wait for the server response, informing the user that the request has
 been successful or not.
 Because of this sequentiality of actions, the communication directed from
 user to server has to follow synchronous rules when proceeding in a certain
 sequence and leave all the other non-interactive options as to be implemented
 in an asynchronous way.
 As example the user shouldn't be prohibited to search for an available
 car even if he/she already made a reservation, but he/she cannot made a
 code request if there is no reservation made.
 A clever way to implement the user-server relationship is to made all the
 communications asynchronous but thanks to particular patterns, MVC among
 them, denying the usage of particular services if certain conditions are
 not met.
 
\begin_inset Newline newline
\end_inset

The user can also interact indirectly with the server using the car - or
 it can be said that the car interacts with the server -.
 Some physical interfaces, such as the emergency button or the numeric keypad,
 allow the user to modify the condition of a car and, consequentially, of
 his/her service.
 
\begin_inset Newline newline
\end_inset

The server/central acts mainly as an elaborator, or referring to the chosen
 architecture, as a monolithic logic processor.
 Its job is to coordinate the requests from the users and the change of
 status of all the cars.
 As said before, the interaction between user and server can be described
 with a simple MVC pattern.
 From a very high view, the user makes an action, communicates it to the
 server, the server elaborates the request and confirms/rejects the will
 of the user.
 The server-car-user relationship is a bit more complex.
 Firstly, there is a continuous interaction between every car and the server,
 that follows this sequence: 
\end_layout

\begin_layout Enumerate
Data retrieval 
\end_layout

\begin_layout Enumerate
Car status update (car to server) 
\end_layout

\begin_layout Enumerate
Database update (server to database) 
\end_layout

\begin_layout Enumerate
[Optional] Car update (server to car), as example the lock following the
 end of the service
\end_layout

\begin_layout Standard
Moreover, to this sequence must be added the interaction with the user,
 that is both passive and active as said in the previous section.
 
\begin_inset Newline newline
\end_inset

The server communicates with all the other components using asynchronous
 messages, because it does not depend on their status but acts as the independen
t core of the software.
 Just referring to the user behavior, it would be unthinkable to have the
 server wait for a user decision, stated that the thinktime can be to long,
 and each communication would become a bottleneck for the whole system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/HighViewComponents.png
	lyxscale 20
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
High level view of the components of the system
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Detailed views
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/MidDetComponent.png
	lyxscale 20
	scale 20

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Deeper high level component diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Deepening the high level component diagram, each big node can be fragmented
 into smaller parts, each characterized by its functionality.
 As previously said, The user can interact directly with the main server/central
 using his/her mobile application, or, indirectly, using some of the car
 physical devices (the button and the numeric keypad).
 Focusing more on the server composition, multiple components to handle
 and manage every part of the service are needed.
 Purely from a topological point of view, the server consists of two big
 areas.
 One refers to all the structures and components that handles and addresses
 incoming data from and to the external world, while the other refers to
 all the functionality and procedures that allow the elaboration of an event
 and the consequent updates on the server itself, but also on the external
 world (database, clients or cars).
\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/DetailedComponent.png
	lyxscale 15
	scale 22
	rotateAngle -90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Detailed component diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Figure 6 represents an even more detailed component diagram, including sub
 components, interfaces, products (artifacts) and ports.
 One of the two area previously described can be seen as a mail office.
 The component ConnectionHandler, as the name suggests, handles the incoming
 and outgoing data, sorting it to the specific controller.
 The other area, composed by the Model and the ServiceCore interacts with
 the Database, providing it the information about the Model itself.
 The NotificationManager component takes care of the communication and interacti
on needed with the user's device.
 In detail:
\end_layout

\begin_layout Itemize
GMSGateway: device that allows SMS text messages to be sent and/or received
 by email, from software applications.
\end_layout

\begin_layout Itemize
PushGateway: device(s) that manages push notifications.
\end_layout

\begin_layout Itemize
NotificationManager: component that takes care of the interaction with the
 user's device.
\end_layout

\begin_layout Itemize
ConnectionHandler: component that sorts incoming and outgoing messages (data
 transfer).
\end_layout

\begin_layout Itemize
ServiceCore: contains all the procedures supporting the software (algorithms,
 functions and so on).
\end_layout

\begin_layout Itemize
ModelSkeleton: representation of the analyzed world
\end_layout

\begin_layout Itemize
CarApplication: contains all the procedures that elaborates the data retrieved
 by the sensor system of the car and interacts with the server.
\end_layout

\begin_layout Itemize
Database: device used to store the model data
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Deployment 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/DeploymentDiagram.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The PowerEnJoy software can be divided into three cores.
 The user-related core is deployed on the mobile device and in the same
 way the car-related core, which slightly differs from the first because
 it mainly takes care of the car logic and data elaboration, is deployed
 on the car processor / computer.
 The last core is obviously related to the logic tier of the whole software,
 deployed on the server machine(s).
 
\begin_inset Newline newline
\end_inset

The Apache Tomcat server runs on the application server and the Spring framework
, that provides a comprehensive programming and configuration model for
 modern Java-based enterprise applications - on any kind of deployment platform.
 A key element of Spring is infrastructural support at the application level.
 Moreover it provides foundational support for JDBC, allowing a simple and
 easy interaction with the main database.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Runtime diagrams
\end_layout

\begin_layout Subsubsection
Login runtime diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename StructureDiagrams/RuntimeLogin.png
	lyxscale 30
	scale 23
	rotateAngle -90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Login runtime sequence
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
This diagram describes, as the name implies, the interaction of some components
 during the login phase.
 After having accessed the login section on the mobile application, the
 user has to insert the login credentials.
 The app communicates with the server, thanks to the ConnectionHandler component
, that makes a request on the database to retrieve the couple user/password.
 As the diagram represents the 
\shape italic
use case description 1.1
\shape default
, described in the RASD, it holds the assumption that the user has already
 registered.
 Otherwise a double check is needed: before searching for the couple user/passwo
rd the server has to check if the user is in the database, meaning he/she
 already registered.
 The user may have inserted a wrong password, so he/she sees an error message
 on the screen, instead of the main page of the app.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Reservation runtime diagram - purpose of model -
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth}{-2cm}{-2cm}
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/RuntimeReservation.png
	lyxscale 10
	scale 21
	rotateAngle -90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Reservation runtime sequence
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth}
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The diagram represents the first part of the 
\shape italic
use case description 1.2
\shape default
 in the RASD, not considering the pickup phase.
 The user accesses the car search section on the mobile app and can decide
 if using his/her own location or a specific address.
 The mobile app converts the address into coordinates (and this denotes
 a part of logic in the app, to lighten the server logic core) and communicates
 them to the server.
 The ConnectionHandler component interacts directly with the model.
 The model searches for the nearby cars, in a 5km range zone, and selects
 the ones with more than 20% of the battery.
 
\begin_inset Newline newline
\end_inset

Why the model and not the database? After having delayed the description
 of the model from the components description, it is necessary to explain
 the purpose of the model.
 It acts as a sort of cache: instead of interacting continuously with the
 database, the server contains, in the model, a bit chunk of information,
 such as car location and minimal status, user status of login and so on.
\begin_inset Newline newline
\end_inset

The server communicates then the list of cars to the mobile app, that displays
 it to the user.
 He/she can now select a car and make a reservation.
 After having informed the server of the reservation request, the ReservationCon
troller component handles the request, creating a timer (to count the expiring
 time before the reservation expires), the reservation object and updating
 Model and Database.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
End of service runtime diagram
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/RuntimeEndService.png
	lyxscale 10
	scale 22
	rotateAngle -90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
End of service runtime activities
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The diagram describes, with some simplifications, the relations of the component
s during the end phase of the service, referring to the 
\shape italic
use case description 5
\shape default
 of the RASD.
 The phase begins when the user inserts the access code of the service using
 the numeric keypad of the car.
 The latter detects that the service is going to end, so the code is reset
 (to avoid further uses of the car) and all the doors are locked.
 Meanwhile the server is informed of the end of the ride, so it collects
 from the model all the data about the ride and starts all the core functionalit
y, in the ServiceCore component, concerning this phase, such as ride cost
 calculation, payment, and so on.
 The Model and the Database are updated (the model doesn't need to know
 the ride anymore, but the database does, for future usage of such data).
 The ServiceCore will also use the NotificationManager to notify the user
 of the service cost, through the PushGateway described in section 2.3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Temporary stop by runtime diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/RuntimeStopBy.png
	lyxscale 30
	scale 30
	rotateAngle -90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Temporary stop by runtime activities
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The diagram describes the sequence of activities of the components of the
 system involved in the temporary stop by action, described partially in
 the 
\shape italic
use case description 4
\shape default
 of the RASD.
 After having turned off and locked the car, the CarApplication stops the
 ride cost counter and powers off some of the car components, such as the
 dashboard, the internal lights and the screen - the user is gone, there
 is no need to waste energy -.
 The server receives information about the stop by action and calculates
 the new fee, operation done by the ServiceCore, using the data contained
 in the Model about the ride and the received data.
 This to check for the coherence of information, in fact the cost on the
 model should be the same of the cost calculated by the car - logic replica
 -.
 After the application of the new fee, the Model is updated and CarApplication
 is informed of it, ready to begin once again charging the user.
 Last thing to notice, and it's also written in the diagram, is that the
 value when the counter stopped and when it begins again, must be the same.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Emergency handling runtime diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename StructureDiagrams/RuntimeEmergency.png
	lyxscale 20
	scale 20
	rotateAngle -90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Emergency handling runtime diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The diagram describes the sequence of activities of the components of the
 system involved in the emergency handling, described in the use case descriptio
n 6 of the RASD.
 During the ride suddenly can happen an accident or a health problem to
 the driver that makes him / her press the emergency button.
 The car system detects the button pressed and calls the car application
 that starts the emergency procedure.
 This procedure will slow down the car together with notifying the Model
 wrought the ConnectionHandler.
 The CarStatus is changed to Emergency by the Model and the ServiceCore
 starts the emergency call procedure which notifies the Database to update
 the old data and use the CollaboratorInterface to call to the user in the
 car and to know what is the problem.
 Finally the sequence ends when the external operator called by the collaborator
, arrives on site.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component interfaces
\end_layout

\begin_layout Subsection
Architectural styles and patterns
\end_layout

\begin_layout Subsubsection
Overall architecture and comparison with other architectures
\end_layout

\begin_layout Standard
As described in the introduction (Overview 2.1), PowerEnJoy software will
 be deployed following a 3-Tier architecture, composed of a database, a
 server and a client.
 The client consists of both the mobile app and the car (that is the other
 main actor, along with the user).
 Here some features of this architecture:
\end_layout

\begin_layout Itemize
Specialized (there is 1 tier dedicated to a certain task).
\end_layout

\begin_layout Itemize
Flexible: the server and the database are single points of failure of the
 system but acts independently.
 If a client 
\begin_inset Quotes eld
\end_inset

brakes
\begin_inset Quotes erd
\end_inset

 the other tiers will still continue to work.
\end_layout

\begin_layout Itemize
Secure: the client will not have direct access to the database, but each
 tier acts as a proxy to the next level.
\end_layout

\begin_layout Itemize
Deployed as a Monolith, so easier implementation of module interactions.
\end_layout

\begin_layout Itemize
Simple to test and deploy.
\end_layout

\begin_layout Standard
Before making a paragon with other architectures, here is made a compartmentaliz
ation between layers, already described in the previously said Overview:
\end_layout

\begin_layout Itemize
Client: contains an interface to the Business Logic Layer (BLL).
\end_layout

\begin_layout Itemize
Server, containing the biggest chunk of software logic: Business Logic Layer,
 that is separate from other tiers or layers, such as the data access layer
 or service layer.
\end_layout

\begin_layout Itemize
Database, containing the Data Access Layer (DAL).
\end_layout

\begin_layout Paragraph

\series bold
3T vs Hexagonal
\end_layout

\begin_layout Standard
The core of the hexagonal architecture is logic implemented by modules with
 attached several services using specific adapters.
 As the 3T it is also deployed as a Monolith and due to the modularity it
 is simple to test and deploy.
 However hexagonal architectures are more suitable for big and complex systems,
 dealing with multiple services and actors.
 The developing complexity is also higher, due to the implementation of
 more modules and adapters/interfaces than a 3T
\series bold
.
\end_layout

\begin_layout Paragraph

\series bold
3T vs SOA
\end_layout

\begin_layout Standard
The SOA, service oriented architecture, is a style of software design where
 services are provided to the other components by application components,
 through a communication protocol over a network.
 A service is a discrete unit of functionality that can be accessed remotely
 and acted upon and updated independently, such as retrieving a credit card
 statement online.
 SOA is:
\end_layout

\begin_layout Itemize
Scalable
\end_layout

\begin_layout Itemize
Reusable
\end_layout

\begin_layout Itemize
Flexible
\end_layout

\begin_layout Standard
SOA would not be a good idea for PowerEnJoy due to the heavy data exchange
 and the lack of the underlying idea of services: in the studied problem
 all the 
\begin_inset Quotes eld
\end_inset

services
\begin_inset Quotes erd
\end_inset

 are fragment and functionality provided by the same provider, such as the
 reservation request or the monitoring request.
\end_layout

\begin_layout Paragraph
3T vs Microservices
\end_layout

\begin_layout Standard
The Microservices architecture is a specialization of and implementation
 approach for service oriented architectures (SOA) used to build flexible,
 independently deployable software systems.
 Services in a microservices architecture are processes that communicate
 with each other over a network in order to fulfill a goal and services
 should have a small granularity.
\begin_inset Newline newline
\end_inset

For the same reasons described in the paragraph, 3T vs SOA, also the Microservic
es architectures is not a good option in describing and developing the PoerEnJoy
 software, despite the better efficiency and the very low dependence factor.
\end_layout

\begin_layout Subsubsection
Protocols
\end_layout

\begin_layout Standard
The tiers of the PowerEnJoy software communicate through the network and
 exchange data in respect of the following protocols.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

JDBC, used by the BLL to communicate with the DAL.
 Considering all the drivers, the supported database servers are: 
\end_layout

\begin_layout Itemize
MySql 5.1 
\end_layout

\begin_layout Itemize
Java DB 10.5.3.0 
\end_layout

\begin_layout Itemize
Oracle 11 
\end_layout

\begin_layout Itemize
PostgreSQL 8.4 
\end_layout

\begin_layout Itemize
DB2 9.7 
\end_layout

\begin_layout Itemize
Sybase ASE 15 
\end_layout

\begin_layout Itemize
Microsoft SQL Server 2008
\end_layout

\begin_layout Standard

\series bold
RESTful API with JSON
\series default
 used by clients to interact with the BLL.
 API calls that need authentication are required to authenticate via HTTP
 basic authentication for each request.
 
\end_layout

\begin_layout Section
Document further information
\end_layout

\begin_layout Subsection
References
\end_layout

\begin_layout Itemize
RASD, before Version 4.5
\end_layout

\begin_layout Itemize
Assignments AA 2016-2017.pdf
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://msdn.microsoft.com/en-us/library/ee658116.aspx
\end_layout

\end_inset

, containing some information about layers design
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://alistair.cockburn.us/Hexagonal+architecture
\end_layout

\end_inset

, contains some information about the Hexagonal architecture
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.nginx.com/blog/introduction-to-microservices/
\end_layout

\end_inset

, contains some information about the Microservices architecture
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://8thlight.com/blog/uncle-bob/2011/09/30/Screaming-Architecture.html
\end_layout

\end_inset

, contains some advices over the architecture choice and implementation
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.uxbooth.com/articles/8-must-see-ux-diagrams/
\end_layout

\end_inset

, contains some examples of user experience diagrams
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://projects.spring.io/spring-framework/
\end_layout

\end_inset

, contains some information about the Spring framework
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.agilemodeling.com/artifacts/componentDiagram.htm
\end_layout

\end_inset

.
 contains a brief description of the component diagrams from an AGILE point
 of view
\end_layout

\begin_layout Itemize
Sample Design Deliverable Discussed on Nov.
 2.pdf
\end_layout

\begin_layout Itemize
Paper on the green move project.pdf
\end_layout

\begin_layout Itemize
Second paper on the green move project.pdf
\end_layout

\begin_layout Subsection
ChangeLog
\end_layout

\begin_layout Itemize
[21/11/2016] [
\series bold
Version 0.1
\series default
] :: Added first part of the document introduction, including preface, Purpose,
 Scope and Definitions.
 ChangeLog and Hours of work sections also introduced.
\end_layout

\begin_layout Itemize
[21/11/2016] [
\series bold
Version 0.2
\series default
] :: Added the References and Document structure sections.
 
\end_layout

\begin_layout Itemize
[23/11/2016] [
\series bold
Version 0.3
\series default
] :: Added the overview of the architecture of the project and a brief descripti
on of the car system, so subsections 2.1 and 2.2.
\end_layout

\begin_layout Itemize
[23/11/2016] [
\series bold
Version 0.4
\series default
] :: Added the description of the different architectural styles that were
 considered and their brief comparison.
\end_layout

\begin_layout Itemize
[24/11/2016] [
\series bold
Version 1.0
\series default
] :: Added high view of the components of the system with a detailed description
, subsubsection 2.3.1.
\end_layout

\begin_layout Itemize
[24/11/2016] [
\series bold
Version 1.1
\series default
] :: Added two detailed component diagrams, subsubsection 2.3.2.
\end_layout

\begin_layout Itemize
[25/11/2016] [
\series bold
Version 1.2
\series default
] :: Added the deployment diagram and its description, subsection 2.4.
\end_layout

\begin_layout Itemize
[26-27/11/2016] [
\series bold
Version 1.3
\series default
] :: Added three runtime views with the respective description (login, reservati
on and end of the service), subsubsections 2.5.1, 2.5.2, 2.5.3.
 
\end_layout

\begin_layout Itemize
[28/11/2016][
\series bold
Version 1.4
\series default
] :: Added runtime diagram of the service temporarily stop by, subsubsection
 2.5.4.
 
\end_layout

\begin_layout Itemize
[28/11/2016][
\series bold
Version 1.5
\series default
] :: Added runtime diagram of an emergency handling, subsubsection 2.5.5 and
 rewriting of section 2.7, including the addition of Protocols subsubsection,
 2.7.2.
\end_layout

\begin_layout Subsection
Hours of work
\end_layout

\begin_layout Subsubsection*
Matteo Frosi
\end_layout

\begin_layout Standard
[Before 21/11/2016]: 3.00 hours (spent in analyzing well known architectures,
 to study and apply them at our problem).
\begin_inset Newline newline
\end_inset

[21/11/2016]: 2.00 hours (further analysis of an applicable architecture
 to our problem, alleging to the classic 3 Tier architectures).
\begin_inset Newline newline
\end_inset

[21/11/2016]: 1.00 hours (writing of the first part of the document).
\begin_inset Newline newline
\end_inset

[23/11/2016]: 2.00 hours (writing of the overview section of the document
 and drawing of architectures images)
\begin_inset Newline newline
\end_inset

[24/11/2016]: 2.00 hours (drawing up of the component view and writing of
 the component high view section)
\begin_inset Newline newline
\end_inset

[24/11/2016]: 2.30 hours (drawing of the component in a more detailed view)
\begin_inset Newline newline
\end_inset

[25/11/2016]: 1.00 hours (writing of the section about the detailed component
 diagrams)
\begin_inset Newline newline
\end_inset

[25/11/2016]: 3.00 hours (thinking, drawing and deploying the deployment
 diagram)
\begin_inset Newline newline
\end_inset

[26-27/11/2016]: 4.00 hours (thinking, drawing and describing three runtime
 views, of Version 1.3)
\begin_inset Newline newline
\end_inset

[28/11/2016]: 1.30 hours (addition of the fourth runtime diagram)
\begin_inset Newline newline
\end_inset

[28/11/2016]: 1.00 hours (rewriting of subsection 2.7 and addition of subsubsectio
n 2.7.2)
\begin_inset Newline newline
\end_inset

TOTAL: 23.00 hours
\end_layout

\begin_layout Subsubsection*

\series bold
Luca Cost
\series default
a
\end_layout

\begin_layout Standard
[Before 21/11/2016]: 2.30 hours (spent learning about the various architectures
 and apply them to our problem)
\begin_inset Newline newline
\end_inset

[22/11/16]: 1.00 hours (spent learning about a possible implementation of
 the different architecture styles)
\begin_inset Newline newline
\end_inset

[23/11/16]: 2.30 hours (spent writing comparison between architectures and
 informing about DD document in general)
\begin_inset Newline newline
\end_inset

[24/11/2016]: 2.00 hours (learning about how to draw a component diagram
 and its effective first drawing)
\begin_inset Newline newline
\end_inset

[25/11/2016]: 1.00 hour (informing on runtime and deploy diagram)
\begin_inset Newline newline
\end_inset

[26/11/2016]: 3.30 hours (thinking and drawing architecture schema)
\begin_inset Newline newline
\end_inset

[28/11/2016]: 2.30 hours (drawing emergency handling runtime diagrma and
 its description, together with drawing other architecture schema)
\end_layout

\begin_layout Standard
TOTAL: 15 hours
\end_layout

\end_body
\end_document
